{"version":3,"sources":["components/calculator/calculator.module.css","pages/display/display.module.css","pages/display/display.jsx","pages/button/button.jsx","utils/util.js","utils/buttons.js","components/calculator/calculator.jsx","App.js","serviceWorkerRegistration.js","reportWebVitals.js","index.js"],"names":["module","exports","Display","props","className","classes","currentOperation","displayValue","Button","button","operations","performOperation","value","result","includes","replace","index","indexOf","split","splice","join","evaluate","err","toString","specialOperands","specialOperations","key","slice","length","buttons","backgroundColor","Calculator","change","display","document","getElementById","setState","state","onEnter","event","keyCode","preventDefault","operationHistory","copyToClipBoard","copyText","select","setSelectionRange","execCommand","undoKeyboardOperation","pop","lastOperation","keyBoardOperation","previousOperation","operation","timer","setInterval","focus","this","clearInterval","type","id","autoComplete","onChange","onKeyUp","map","style","onClick","React","Component","App","Boolean","window","location","hostname","match","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.8e8a97c3.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"calculator_container__2SSAU\",\"buttonsContainer\":\"calculator_buttonsContainer__1kCrL\",\"button\":\"calculator_button__sl-En\",\"hidden\":\"calculator_hidden__2Uhu1\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"displayContainer\":\"display_displayContainer__3M3PO\",\"displayValue\":\"display_displayValue__36u12\"};","import React from 'react';\r\nimport * as classes from './display.module.css'; \r\nconst Display = (props) => {\r\n    return (\r\n        <div className={classes.displayContainer}>\r\n            <div className={classes.displayValue}>\r\n                <div>{props.currentOperation}</div>\r\n                <div>{props.displayValue}</div>\r\n            </div>\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default Display;","import React from 'react';\r\nimport * as classes from './button.module.css';\r\n\r\nconst Button = (props) => {\r\n    return (\r\n        <div className={classes.button}>\r\n            {props.button}\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default Button;","import { evaluate } from 'mathjs';\r\n\r\nconst specialOperands = ['undo', 'copy', 'delete', 'CE', 'C', 'backspace','ON'];\r\n\r\nconst performOperation = (value) => {\r\n    let result;\r\n    try {\r\n        if(value.includes('sin') || value.includes('cos') || value.includes('tan')) {\r\n            value = value.replace(/\\((.*)\\)/g, \"($1deg)\");\r\n        }\r\n        if(value.includes('%')) {\r\n            let index = value.indexOf('%');\r\n            value = value.split('');\r\n            value.splice(index, 1,'*(1/100)*');\r\n            value = value.join('');\r\n            /* result = Math.floor(evaluate(value));\r\n            return result; */\r\n        }   \r\n        result = evaluate(value);\r\n    } catch(err) {\r\n        result = err.toString().split('\\n')[0];\r\n    } finally {\r\n        return result ? result : 0; \r\n    }\r\n}\r\n\r\nconst specialOperations = (value,key) => {\r\n    if(key === 'CE') {\r\n        return '';\r\n    }  else if(key === 'delete'){\r\n        return value.slice(1,value.length);\r\n    } else if(key === 'backspace') {\r\n        return value.slice(0, value.length-1);\r\n    }\r\n}\r\n\r\nexport const operations = {\r\n    performOperation,\r\n    specialOperands,\r\n    specialOperations\r\n};","const buttons = [\r\n    {\r\n        value: 'undo',\r\n    },\r\n    {\r\n        value: '('\r\n    },\r\n    {\r\n        value: ')'\r\n    },\r\n    {\r\n        value: 'copy'\r\n    },\r\n    {\r\n        value: 'backspace'\r\n    },\r\n    {\r\n        value: 'sin'\r\n    },\r\n    {\r\n        value: 'cos'\r\n    },\r\n    {\r\n        value: 'tan'\r\n    },\r\n    {\r\n        value: 'CE'\r\n    },\r\n    {\r\n        value: 'C'\r\n    },\r\n    {\r\n        value: 'delete'\r\n    },\r\n    {\r\n        value: '/'\r\n    },\r\n    {\r\n        value: '7',\r\n        backgroundColor: '#060606'\r\n    },\r\n    {\r\n        value: '8',\r\n        backgroundColor: '#060606'\r\n    },\r\n    {\r\n        value: '9',\r\n        backgroundColor: '#060606'\r\n    },\r\n    {\r\n        value: '*'\r\n    },\r\n    {\r\n        value: '4',\r\n        backgroundColor: '#060606'\r\n    },\r\n    {\r\n        value: '5',\r\n        backgroundColor: '#060606'\r\n    },\r\n    {\r\n        value: '6',\r\n        backgroundColor: '#060606'\r\n    },\r\n    {\r\n        value: '-'\r\n    },\r\n    {\r\n        value: '1',\r\n        backgroundColor: '#060606'\r\n    },\r\n    {\r\n        value: '2',\r\n        backgroundColor: '#060606'\r\n    },\r\n    {\r\n        value: '3',\r\n        backgroundColor: '#060606'\r\n    },\r\n    {\r\n        value: '+'\r\n    },\r\n    {\r\n        value: '%'\r\n    },\r\n    {\r\n        value: '0',\r\n        backgroundColor: '#060606' \r\n    },\r\n    {\r\n        value: '.'\r\n    },\r\n    {\r\n        value: '='\r\n    },\r\n];\r\n\r\nexport default buttons;","import React from 'react';\r\nimport * as classes from './calculator.module.css';\r\nimport Display from '../../pages/display/display';\r\nimport Button from '../../pages/button/button';\r\n\r\nimport { operations } from '../../utils/util';\r\nimport buttons from '../../utils/buttons';\r\n\r\nclass Calculator extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            displayValue: '',\r\n            currentOperation: '',\r\n            previousOperation: '',\r\n            operationHistory: [],\r\n            timer: null\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        let timer = setInterval(() => {\r\n            document.getElementById('display').focus();\r\n        }, 400);\r\n        this.setState(state => { return { ...state, timer } });\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        if (this.state.timer) {\r\n            clearInterval(this.state.timer);\r\n        }\r\n    }\r\n\r\n    change = () => {\r\n        const display = document.getElementById('display').value;\r\n        this.setState(state => { return { ...state, displayValue: display } });\r\n    }\r\n\r\n    onEnter = (event) => {\r\n        if (event && event.keyCode === 13) {\r\n            event.preventDefault();\r\n            this.performOperation();\r\n        }\r\n    }\r\n\r\n    performOperation = () => {\r\n        const display = document.getElementById('display').value;\r\n        let operationHistory = [...this.state.operationHistory, display]\r\n        let result = operations.performOperation(display);\r\n        document.getElementById('display').value = result;\r\n        this.setState(state => { return { ...state, displayValue: result, operationHistory, currentOperation: display } });\r\n    }\r\n\r\n    copyToClipBoard = () => {\r\n        let copyText = document.getElementById(\"display\");\r\n        copyText.select();\r\n        copyText.setSelectionRange(0, 99999);\r\n        document.execCommand(\"copy\");\r\n    }\r\n    undoKeyboardOperation = () => {\r\n        if (this.state.operationHistory.length === 0) {\r\n            this.setState(state => { return { ...state, currentOperation: '', displayValue: '' } });\r\n            return;\r\n        }\r\n\r\n        // to update to the last but one operation\r\n        if (this.state.operationHistory.length > 1) {\r\n            this.state.operationHistory.pop();\r\n        }\r\n        let lastOperation = this.state.operationHistory.pop();\r\n        document.getElementById('display').value = lastOperation;\r\n\r\n        // to update the displayValue for the lastOperation\r\n        let result = operations.performOperation(lastOperation);\r\n        document.getElementById('display').value = result;\r\n\r\n        this.setState(state => { return { ...state, displayValue: result, currentOperation: lastOperation } });\r\n    }\r\n\r\n    // to perform operations using keyboard\r\n    keyBoardOperation = (key) => {\r\n        let display = document.getElementById('display').value;\r\n        if (key === '=') {\r\n            this.performOperation();\r\n        } else if (key === 'copy') {\r\n            this.copyToClipBoard();\r\n        } else if (key === 'undo') {\r\n            this.undoKeyboardOperation()\r\n        } else if (operations.specialOperands.indexOf(key) === -1) {\r\n            if(this.state.previousOperation === '=') {\r\n                document.getElementById('display').value = key;\r\n                this.change();\r\n            } else {\r\n                document.getElementById('display').value = display + key;\r\n                this.change();\r\n            }          \r\n        } else {\r\n            if (key === 'CE') {\r\n                let operationHistory = [];\r\n                document.getElementById('display').value = '';\r\n                this.setState(state => { return { ...state, operationHistory, currentOperation: '' } });\r\n            }\r\n            if (key === 'C' && this.state.displayValue.length === 0) {\r\n                this.setState(state => { return { ...state, currentOperation: '' } });\r\n            } else if(key === 'C' && display.toString().split(':').includes('SyntaxError')) {\r\n                display =  '';\r\n                let operation = this.state.operationHistory.pop();\r\n                document.getElementById('display').value = operation;\r\n                this.setState(state => { return {...state, displayValue: operation, currentOperation: operation} })\r\n            } else if(key === 'C') {\r\n                let result = display.slice(0, display.length - 1);\r\n                document.getElementById('display').value = result;\r\n                this.setState(state => { return {...state, displayValue: result} });\r\n            } else {\r\n                let result = operations.specialOperations(display, key)\r\n\r\n                document.getElementById('display').value = document.getElementById('display').value + result;\r\n                this.setState(state => { return { ...state, displayValue: result } });\r\n            }\r\n\r\n            \r\n        }\r\n        this.setState(state => { return {...state, previousOperation: key}});\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className={classes.container}>\r\n                <input type=\"text\" id=\"display\" autoComplete=\"off\" className={classes.hidden} onChange={() => this.change()} onKeyUp={(event) => this.onEnter(event)} />\r\n                <Display displayValue={this.state.displayValue} currentOperation={this.state.currentOperation} />\r\n                <div className={classes.buttonsContainer}>\r\n                    {buttons.map(button => (<div key={button.value} className={classes.button}\r\n                        style={{ backgroundColor: button.backgroundColor ? button.backgroundColor : 'rgb(43 41 41)' }}\r\n                        onClick={() => this.keyBoardOperation(button.value)}\r\n                    >\r\n                        <Button button={button.value} />\r\n                    </div>))}\r\n                </div>\r\n                <Button />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Calculator;","import React from 'react';\nimport './App.css';\n\nimport Calculator from './components/calculator/calculator';\n\nfunction App() {\n  \n  return (\n    <div className=\"App\">\n      <Calculator />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.unregister();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}